JavaScript(JS)是一门跨平台,面向对象的脚本语言,用来控制网页行为和实现人机交互效果
JavaScript和Java是完全不同的语言,不论是概念还是设计,但是基础语法类似
由以下三部分组成:
  1.ECMAScript:规定了JS基础语法核心知识,包括变量,数据类型,流程控制,函数,对象等
  2.BOM:浏览器对象模型,用于操作浏览器本身,如:页面弹窗,地址栏操作,关闭窗口等
  3.DOM:文档对象模型,用于操作HTML文档,如:改变标签内的内容,改变标签内字体样式等


JS引入方式:
  1.内部脚本:将JS代码定义在HTML页面中
    JavaScript代码必须位于<script></script>标签之间
    在HTML文档中,可以在任意地方放置任意数量的<script></script>
    一般把脚本置于<body>元素的底部,可改善显示速度
  2.外部脚本:将JS代码定义在外部JS文件中,然后引入到HTML页面中
    外部JS文件中只包含JS代码,不包含<script>标签
    引入外部JS的<script>标签,必须是双标签


JS书写规范:
  结束符:每行JS代码结尾以分号结尾,而结尾的分号可有可无(建议在一个项目中保持一致)
  注释:单行注释和多行注释的写法与Java一致


JS数据类型(分为原始数据类型和引用数据类型):
  1.number:整数,小数,NaN(Not a Number)
  2.string:字符串(单引号,双引号,反引号皆可),正常使用推荐单引号
  3.boolean:true,false
  4.null:对象为空,JavaScript对大小写敏感,所以null,Null,NULL不是一个意思
  5.undefined:当声明的变量未初始化时,该变量的默认值是undefined
  细节:
    对于字符串类型的数据,除了可以使用双引号,单引号以外,还可以使用反引号,使用反引号引起来的字符串也成为模板字符串


JS自定义对象:
  let 对象 = {属性名: 属性值, 属性名: 属性值, 方法名: function(){...}}
  let 对象 = {属性名: 属性值, 属性名: 属性值, 方法名(){...}}
  注意:在定义对象中的方法时,不要使用箭头函数,会导致this指针出现问题


JsonAPI:
  1.JSON.stringify(...) 将js对象转换为json格式的字符串
  2.JSON.parse(...) 将json格式的字符串转为js对象


JS DOM:
DOM(Document Object Model):文档对象模型,也就是JavaScript将HTML文档的各个组成部分封装为对象,封装的对象分为:
  1.Document:整个文档对象
  2.Element:元素对象
  3.Attribute:属性对象
  4.Text:文本对象
  5.Comment:注释对象
DOM的作用:
  1.改变HTML元素的内容
  2.改变HTML元素的样式(CSS)
  3.对HTML的DOM事件作出反应
  4.添加和删除HTML元素
DOM操作:
DOM的核心思想:将网页的内容当做对象来处理,标签的所有属性在该对象上都可以找到,并且修改这个对象的属性,就会自动映射到标签身上
  document对象:
    网页中所有内容都封装在document对象中
    它提供的属性和方法都是用来访问和操作网页内容的，如：document.write(…)
  DOM操作步骤:
    1.获取DOM元素对象
          document.querySelector('选择器') 根据CSS选择器来获取DOM元素获取到匹配到的第一个元素
          document.querySelectorAll('选择器') 根据CSS选择器来获取DOM元素获取匹配到的所有元素
          细节:获取到的所有元素会被封装到一个NodeList节点集合中,这个集合是一个伪数组(有长度,有索引的数组,但没有push,pop等数组方法)
    2.操作DOM对象的属性或方法(查阅文档)


JS事件监听/事件监听:
事件:发生在HTML元素上的交互行为,如:鼠标点击,键盘按下,鼠标滑过,鼠标移出,鼠标滚轮滚动等
  常见事件:
    1.鼠标事件:click鼠标点击,mouseenter鼠标移入,mouseleave鼠标移出
    2.键盘事件:keydowns键盘按下,keyup键盘抬起
    3.表单事件:input用户输入,submit用户提交
    4.焦点事件:focus获得焦点,blur失去焦点
事件监听:JavaScript可以在事件发生时,立即调用一个函数来执行特定的代码,这个过程就是事件监听(也称为事件绑定或注册事件)
  事件监听语法:事件源.addEventListener('事件类型', 要执行的函数);(可以对一个事件源绑定多次)
  三要素:
    1.事件源:哪个dom元素触发了事件,要获取dom元素
    2.事件类型:用什么方式触发,比如:鼠标单击click,鼠标经过mouseover
    3.要执行的函数:要做什么事