Maven是一款用于管理和构建Java项目的工具,是Apache旗下的一个开源项目
Maven的主要功能包括:
  1.依赖管理:方便快捷的管理项目依赖的资源(jar包),避免版本冲突问题
    在使用Maven前,我们项目中要想使用某一个jar包,就需要把这个jar包从官方网站下载下来,然后再导入到项目中,然后在这个项目中就可以使用这个jar包了
    在使用Maven后,当使用Maven进行项目依赖(jar包)管理,则很方便的可以解决这个问题,只需要在Maven项目的pom.xml文件中书写相应的代码即可
  2.项目构建:Maven提供了一套简单的命令来完成项目构建
    通过Maven中的命令就可以很方便的完成项目的编译(compile),测试(test),打包(package),发布(deploy)等操作
    而且这些操作都是跨平台的,也就是说无论你是Windows系统还是Linux系统还是Mac系统,这些命令都是支持的
  3.统一项目结构:Maven还提供了标准,统一的项目结构
    在使用Maven前,不同的开发工具创建出来的java项目的目录结构是存在差异的,这就会出现一个问题:
      例如,Eclipse创建的java项目,并不能直接导入IDEA中;而IDEA创建的java项目也没有办法直接导入到Eclipse中
    在使用Maven后,无论你是使用Eclipse还是IDEA还是其他的Java开发工具,创建出来的java项目的目录结构都是统一的,这样就可以很方便的进行项目的迁移
      main目录下存放的是项目的源代码,test目录下存放的是项目的测试代码
      而无论是在main还是在test下都有两个目录,一个是java,用来存放源代码文件;另一个是resources,用来存放配置文件
总之,Maven就是一款管理和构建java项目的工具


Maven模型:
  1.项目对象模型(POM):项目对象模型是Maven的核心,它是Maven的核心,也是Maven的基础
  2.依赖管理模型:
  3.构建生命周期/阶段:


Maven仓库(仓库:用于存储资源,管理各种jar包,本质就是一个目录(文件夹),被用来存储开发中所有依赖(jar包)和插件):
  1.本地仓库:自己计算机上的一个目录(用来存储jar包)
  2.中央仓库:由Maven团队维护的全球唯一的 仓库地址:https://repo1.maven.org/maven2/
  3.远程仓库(私服):一般由公司团队搭建的私有仓库
当项目中使用坐标引入对应依赖jar包后:
  1.首先会查找本地仓库中是否有对应的jar包
    如果有,则在项目直接引用
    如果没有,则去中央仓库中下载对应的jar包到本地仓库
  2.如果还可以搭建远程仓库(私服),将来jar包的查找顺序则变为:本地仓库 --> 远程仓库 --> 中央仓库


Maven项目的目录结构:
maven-project01
|--- src (源代码目录和测试代码目录)
     |--- main (源代码目录)
          |--- java (源代码java文件目录)
          |--- resources (源代码配置文件目录)
     |--- test (测试代码目录)
          |--- java (测试代码java目录)
          |--- resources (测试代码配置文件目录)
|--- target (编译、打包生成文件存放目录)


导入Maven项目:
  方式一:File -> Project Structure -> Modules -> Import Module -> 选择maven项目的pom.xml
  方式二Maven面板 -> + (Add Maven Projects) -> 选择maven项目的pom.xml


Maven生命周期:
Maven的生命周期就是为了对所有的构建过程进行抽象和统一,从而使得构建过程的管理和维护变得更加简单和高效
这个生命周期包含了项目的清理,初始化,编译,测试,打包,集成测试,验证,部署和站点生成等几乎所有构建步骤
Maven对项目构建的生命周期划分为3套(相互独立):
  1.clean:清理工作。
  2.default:核心工作.如:编译,测试,打包,安装,部署等
  3.site:生成报告,发布站点等
每套生命周期包含一些阶段(phase),阶段是有顺序的,后面的阶段依赖于前面的阶段,在同一套生命周期中,我们在执行后面的生命周期时,前面的生命周期都会执行
主要关注以下几个:
  1.clean:移除上一次构建生成的文件
  2.compile:编译项目源代码
  3.test:使用合适的单元测试框架运行测试(junit)
  4.package:将编译后的文件打包,如:jar,war等
  5.install:安装项目到本地仓库
Maven的生命周期是抽象的,这意味着生命周期本身不做任何实际工作.在Maven的设计中实际任务(如源代码编译)都交由插件来完成
思考:当运行package生命周期时,clean和compile生命周期会不会运行?
  答:clean不会运行,compile会运行.因为compile与package属于同一套生命周期,而clean与package不属于同一套生命周期
在日常开发中当我们要执行指定的生命周期时,有两种执行方式:
1.在idea工具右侧的maven工具栏中选择对应的生命周期,双击执行(推荐)
2.在DOS命令行中,通过maven命令执行


依赖范围:
依赖的jar包默认情况下可以在任何地方使用,在main目录下可以使用;在test目录下也可以使用
在maven中,如果希望限制依赖的使用范围可以通过<scope>…</scope>设置其作用范围
  作用范围:
    - 主程序范围有效(main文件夹范围内)
    - 测试程序范围有效(test文件夹范围内)
    - 是否参与打包运行(package指令范围内)


Maven常见问题:
  - 问题现象:Maven项目中添加的依赖未正确下载,造成右侧Maven面板中的依赖报红,再次reload重新加载也不会再下载
  - 产生原因:由于网络原因,依赖没有下载完整导致,在maven仓库中生成了xxx.lastUpdated文件,该文件不删除不会再重新下载
解决方案：
  1.根据maven依赖的坐标找到仓库中对应的xxx.lastUpdated文件并删除,删除之后重新加载项目即可
  2.通过命令(del /s *.lastUpdated)批量递归删除指定目录下的xxx.lastUpdated文件,删除之后重新加载项目即可
  3.重新加载依赖,依赖下载了之后maven面板可能还会报红,此时可以关闭IDEA,重新打开IDEA加载此项目即可