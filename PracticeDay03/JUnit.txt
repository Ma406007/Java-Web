测试:一种用来促进鉴定软件的正确性,完整性,安全性和质量的过程 阶段划分:单元测试,集成测试,系统测试,验收测试
  1.单元测试
    - 介绍:对软件的基本组成单位进行测试,最小测试单位
    - 目的:检验软件基本组成单位的正确性
    - 测试人员:开发人员
  2.集成测试
    - 介绍:将已分别通过测试的单元按设计要求组合成系统或子系统,再进行的测试
    - 目的:检查单元之间的协作是否正确
    - 测试人员:开发人员
  3.系统测试
    - 介绍:对已经集成好的软件系统进行彻底的测试
    - 目的:验证软件系统的正确性以及性能是否满足指定的要求
    - 测试人员:测试人员
  4.验收测试
    - 介绍:交付测试,是针对用户需求和业务流程进行的正式的测试
    - 目的:验证软件系统是否满足验收标准
    - 测试人员:客户/需求方
测试方法:
  1.白盒测试:清楚软件内部结构和代码逻辑,用于验证代码以及逻辑正确性
  2.黑盒测试:不清楚软件内部结构和代码逻辑,用于验证软件的功能,兼容性,验收测试等方面
  3.灰盒测试:结合了白盒测试和黑盒测试的特点,既关注软件的内部结构又考虑外部表现(功能)


JUnit:最流行的Java测试框架之一,提供了一些功能来方便程序进行单元测试(第三方公司提供)
之前我们测试代码都是通过main方法进行测试的,通过main方法是可以进行测试的,可以测试程序是否正常运行.但是main方法进行测试时会存在如下问题:
  1.测试代码与源代码未分开,难维护
  2.一个方法测试失败,影响后面方法
  3.无法自动化测试,得到测试报告
而如果我们使用了JUnit单元测试框架进行测试将会有以下优势:
  1.测试代码与源代码分开,便于维护
  2.可根据需要进行自动化测试
  3.可自动分析测试结果,产出测试报告
步骤:
  1.在pom.xml中引入JUnit的依赖
  2.在test/java目录下创建测试类,并编写对应的测试方法,并在方法上声明@Test注解
  3.运行单元测试(测试通过:绿色;测试失败:红色)
  注意:
    - 测试类的命名规范为:XxxxTest
    - 测试方法的命名规定为:public void xxx() {...}
    - 一个测试方法失败,不会影响其他方法的测试


单元测试--企业开发规范
原则:编写测试方法时要尽可能地考虑到各种可能的情况(尤其是边界值)并进行测试