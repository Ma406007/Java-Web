<?xml version="1.0" encoding="UTF-8"?>
<!-- <project>:pom文件的根标签,表示当前maven项目 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- <modelVersion>:声明项目描述遵循哪一个POM模型版本-->
    <!-- 虽然模型本身的版本很少改变,但它仍然是必不可少的.目前POM模型版本是4.0.0-->
    <!-- POM模型版本 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- POM(Project Object Model)指的是项目对象模型,用来描述当前的maven项目 -->

    <!-- 坐标:资源(jar包)的唯一标识,通过坐标可以定位到所需资源(jar包)位置
         可以使用坐标来定义项目或引入项目中需要的依赖
         坐标的组成部分:
           1.<groupId>:定义当前Maven项目隶属组织名称(通常是域名反写,例如:com.itheima)
           2.<artifactId>:定义当前Maven项目名称(通常是模块名称,例如:order-service,goods-service)
           3.<Version>:定义当前项目版本号 SNAPSHOT:功能不稳定,尚处于开发中的版本(即快照版本) RELEASE:功能趋于稳定,当前更新停止(可以用于发行的版本)
    -->
    <!-- 当前项目坐标 -->
    <groupId>org.example</groupId>
    <artifactId>maven-practice01</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 项目的JDK版本及编码 -->
    <properties>
        <!-- <maven.compiler.source>:编译JDK的版本 -->
        <maven.compiler.source>17</maven.compiler.source>
        <!-- <maven.compiler.target>:运行JDK的版本 -->
        <maven.compiler.target>17</maven.compiler.target>
        <!-- <project.build.sourceEncoding>:设置项目的字符集 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- 依赖:指当前项目运行所需要的jar包.一个项目中可以引入多个依赖 -->
    <!-- 之前我们项目中需要jar包时直接就把jar包复制到项目下的lib目录;而现在我们只需要在pom.xml中配置依赖的配置文件即可
         而这个依赖对应的jar包其实就在我们本地电脑上的maven仓库中。 -->
    <!-- 步骤:
           1.在pom.xml中编写<dependencies>标签
           2.在<dependencies>标签中使用<dependency>引入坐标
           3.定义坐标的 groupId,artifactId,version
           4.点击刷新按钮引入最新加入的坐标
             刷新依赖:保证每一次引入新的依赖,或者修改现有的依赖配置,都可以加入最新的坐标
    -->
    <!-- 注意:
           1.如果引入的依赖在本地仓库中不存在,将会连接远程仓库/中央仓库,然后下载依赖(这个过程会比较耗时,耐心等待)
           2.如果不知道依赖的坐标信息,可以到mvn的中央仓库(https://mvnrepository.com/)中搜索
    -->
    <dependencies>
        <!-- 依赖:spring-context -->
        <!-- 依赖传递:如果在maven项目中,A依赖了B,B依赖了C,C依赖了D,那么在A项目中也会有C和D依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>6.1.4</version>

            <!-- 排除依赖:指主动断开依赖的资源,被排除的资源无需指定版本 -->
            <!-- 如果传递下来的依赖在项目开发中我们确实不需要,此时我们可以通过Maven中的排除依赖功能来将这个依赖排除掉 -->
            <exclusions>
                <exclusion>
                    <groupId>io.micrometer</groupId>
                    <artifactId>micrometer-observation</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--Junit单元测试依赖-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.9.1</version>
            <!-- 在pom.xml中配置 <scope></scope> 属性来控制依赖范围 -->
            <scope>test</scope>
        <!-- scope的取值常见的如下:
               1.compile(默认):主程序,测试程序,打包(运行)都可以使用
               2.test:测试程序可以使用
               3.provided:主程序,测试程序,但是打包时会被排除
               4.runtime:测试程序,打包(运行)都可以使用,但是主程序会被排除
        -->
        </dependency>
    </dependencies>

</project>