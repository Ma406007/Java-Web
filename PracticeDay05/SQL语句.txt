SQL:结构化查询语言,一门操作关系型数据库的编程语言,定义操作所有关系型数据库的统一标准
SQL语句根据其功能被分为四大类:DDL,DML,DQL,DCL(DDL,DML,DQL重点掌握,DCL了解即可)
  1.DDL(Data Definition Language):数据定义语言,用来定义数据库对象(数据库,表,字段)
  2.DML(Data Manipulation Language):数据操作语言,用来对数据库表中的数据进行增删改
  3.DQL(Data Query Language):数据查询语言,用来查询数据库中表的记录
  4.DCL(Data Control Language):数据控制语言,用来创建数据库用户和控制数据库的访问权限


DDL中数据库常见的操作:查询,创建,使用,删除
  1.查询:
    show databases; 查询所有数据库
    select database(); 查询当前数据库,要操作某一个数据库需要切换到该库,通过该指令就可以查询到当前所处的数据库
  2.创建:
    create database [if not exists] 数据库名 [default charset utf8mb4]; 创建数据库时可以不指定字符集(在MySQL8之后默认字符集为utf8mb4)(不能创建重名数据库)
  3.使用:
    use 数据库名; 使用数据库
  4.删除:
    drop database [if exists] 数据库名; 删除指定数据库(不能删除不存在的数据库)


表操作:
  1.创建
    create table 表名(
        字段1 字段类型 [约束] [comment 字段1注释],
        字段2 字段类型 [约束] [comment 字段2注释],
        ......
        字段n 字段类型 [约束] [comment 字段n注释]
    ) [comment 表注释];
  2.约束:作用在表中字段上的规则(创建表/修改表的时候添加),用于限制存储在表中的数
    作用:保证数据库当中数据的正确性,有效性和完整性
    有以下五种:
      not null(非空约束):限制该字段值不能为null
      unique(唯一约束):保证字段的所有数据都是唯一且不重复的
      primary key(主键约束):主键是一行数据的唯一标识,要求非空且唯一
        主键自增:auto_increment
          - 每次插入新的行记录时,数据库会自动生成id字段(主键)下的值
          - 具有auto_increment的数据列是一个正数序列开始增长(从1开始自增)
      default(默认约束):保存数据时如果未指定该字段值,则采用默认值
      foreign key(外键约束):让两张表的数据建立链接,保证数据的一致性和完整性
  3.数据类型分为三类:数值类型,字符串类型,日期事件类型(满足业务需求的情况下尽量选择占用空间较小的类型)
    数值类型:
      tinyint(小整数值):大小1byte 有符号(-128, 127) 无符号(0, 255)
      smallint(大整数值):大小2bytes 有符号(-32768, 32767) 无符号(0, 65535)
      mediumint(大整数值):大小3bytes 有符号(-8388608, 8388607) 无符号(0, 16777215)
      int/integer(大整数值):大小4bytes 有符号(-2147483648, 2147483647) 无符号(0, 4294967295)
      bigint(极大整数值):大小8bytes 有符号(-2^63, 2^63 - 1) 无符号(0, 2^64 - 1)
      float(单精度浮点数):大小4bytes 有符号(-3.402823466E+38, 3.402823466351E+38) 无符号0和(1.175494351E-38, 3.402823466E+38)
      double(双精度浮点数):大小8bytes 有符号((-1.7976931348623157E+308, 1.7976931348623157E+308) 无符号0和(2.2250738585072014E-308, 1.7976931348623157E+308)
      decimal(精确定点数):无具体大小 有符号范围依赖于M(精度)和D(标度)的值 无符号范围依赖于M(精度)和D(标度)的值
        - float/double/decimal(5, 2):5表示整个数字的长度,2表示小数位个数
    字符串类型:
      char:大小0-255bytes 定长字符串(需要指定长度,指定多长就占用多少个字符,性能相比varchar更好)
      varchar:大小0-65535bytes 变长字符串(需要指定长度,指定长度为最大占用长度)
      tinyblob:大小0-255bytes 不超过255个字符的二进制数据
      tinytext:大小0-255bytes 短文本字符串
      blob:大小0-65535bytes 二进制形式的长文本数据
      text:大小0-65535bytes 长文本数据
      mediumblob:大小0-16777215bytes 二进制形式的中等长度文本数据
      mediumtext:大小0-16777215bytes 中等长度文本数据
      longblob:大小0-4294967295bytes 二进制形式的极大文本数据
      longtext:大小0-4294967295bytes 极大文本数据
    日期时间类型:
      date:大小3bytes 范围1000-01-01至9999-12-31 格式YYYY-MM-DD
      time:大小3bytes 范围-838:59:59至838:59:59 格式HH:MM:SS
      year:大小1bytes 范围1901-2155 格式YYYY
      datetime:大小8bytes 范围1000-0101 00:00:00至9999-12-31 23:59:59 格式YYYY-MM-DD HH:MM:SS
      timestamp:大小4bytes 范围1970-01-01 00:00:01至2038-01-19 03-14-07 格式YYYY-MM-DD HH:MM:SS


表操作-其他操作:
  1.查询数据库:
    show tables; 查询当前数据库的所有表
    desc 表名; 查看指定的表结构,可以查看指定表的字段,字段的类型,是否可以为null,是否存在默认值等信息
    show create table 表名; 查询指定表的建表语句
  2.添加字段:
    alter table 表名 add 字段名 类型(长度) [comment 注释] [约束]; 添加字段
  3.修改字段:
    alter table 表名 modify 字段名 新数据类型(长度); 修改字段类型
    alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束]; 修改字段名,字段类型
  4.删除字段:
    alter table 表名 drop 字段名; 删除字段
  5.修改表名:
    rename table 表名 to 新表名; 修改表名
  6.删除表结构:
    drop table [if exists] 表名; 删除表


DML中的增删改操作:
  1.增加(Insert):
    insert into 表名(字段名1, 字段名2) values(值1, 值2); 向指定字段添加数据
    insert into 表名 values(值1, 值2, ...); 全部字段添加数据
    insert into 表名(字段名1, 字段名2) values(值1, 值2), (值1, 值2); 批量添加数据(指定字段)
    insert into 表名 values(值1, 值2, ...), (值1, 值2, ...); 批量添加数据(全部字段)
    注意事项:
      - 插入数据时,指定的字段顺序要与值的顺序是一一对应的
      - 字符串和日期型数据应该包含在引号中
      - 插入的数据大小应该在字段的规定范围内
  2.修改(update):
    update 表名 set 字段名1 = 值1, 字段名2 = 值2, ... [where 条件];
    注意事项:
      - 修改语句的条件可以有也可以没有,如果没有条件则会修改整张表的所有数据
      - 在修改数据时,一般需要同时修改公共字段update_time,将其修改为当前操作时间
  3.删除(delete):
    delete from 表名 [where 条件];
    注意事项:
      - delete语句的条件可以有也可以没有,如果没有条件则会删除整张表的所有数据
      - delete语句不能删除某一个字段的值(可以使用update,将该字段值置为null即可)
      - 当进行删除全部数据操作时会提示询问是否确认删除所有数据,直接点击Execute即可


DQL基本查询:
  select 字段1, 字段2, 字段3 from 表名; 查询多个字段
  select * from 表名; 查询所有字段(通配符)(不推荐)
  select 字段1 [as 别名1], 字段2 [as 别名2] from 表名; 设置别名
  select distinct 字段列表 from 表名; 去除重复记录


DQL条件查询:
  select 字段列表 from 表名 where 条件列表; 条件列表:意味着可以有多个条件
学习条件查询就是学习条件的构建方式,而在SQL语句当中构造条件的运算符分为两类:
  1.比较运算符:
    > 大于
    >= 大于等于
    < 小于
    <= 小于等于
    = 等于
    <>或!= 不等于
    between...and... 在某个范围之内(含最小,最大值)
    in(...) 在in之后的列表中的值,多选一
    like 占位符 模糊匹配(_匹配单个字符,%匹配任意个字符)
    is null 是null
  2.逻辑运算符
    and或&& 并且
    or或|| 或者
    not或! 非,不是


聚合函数(会忽略空值,对NULL值不作为统计):
  count 统计数量
    - 按照列去统计有多少行数据
    - 在根据指定的列统计的时候,如果这一列中有null的行,该行不会被统计在其中
  max 最大值
    - 计算指定列的最大值
  min 最小值
    - 计算指定列的最小值
  avg 平均值
    - 计算指定列的平均值
  sum 求和
    - 计算指定列的数值和,如果不是数值类型那么计算结果为0


DQL分组查询:
  - 分组:按照某一列或者某几列把相同的数据进行合并输出
  - 分组其实就是按列进行分类(指定列下相同的数据归为一类),然后可以对分类完的数据进行合并计算
  - 分组查询通常会使用聚合函数进行计算
  select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];
  注意:
    - 分组之后,查询的字段一般为聚合函数和分组字段,查询其他字段无任何意义
    - 执行顺序:where>聚合函数>having
where与having区别(面试题)
- 执行时机不同:where是分组之前进行过滤,不满足where条件,不参与分组;而having是分组之后对结果进行过滤
- 判断条件不同:where不能对聚合函数进行判断;而having可以


DQL排序查询:
  select 字段列表
  from 表名
  [where 条件列表]
  [group by 分组字段]
  order by 字段1 排序方式1, 字段2 排序方式2, ...;(排序方式:ASD(升序,默认值),DESC(降序))
  注意:如果是多字段排序,当第一个字段值相同时,才会根据第二个字段进行排序,以此类推


DQL分页查询:
  select 字段列表 from 表名 limit 起始索引, 查询记录数;
  注意:
    - 起始索引从0开始 计算公式:起始索引=(查询页码-1)*每页显示记录数
    - 分页查询是数据库的方言,不同的数据库有不同的实现,MySQL中是LIMIT
    - 如果查询的是第一页数据,起始索引可以省略,直接简写为limit条数