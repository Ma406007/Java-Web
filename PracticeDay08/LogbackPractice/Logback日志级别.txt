程序中的日志是用来记录应用程序的运行信息,状态信息,错误信息的
在程序中记录日志的原因:
  - 便于追踪应用程序中的数据信息,程序的执行过程
  - 便于对应用程序的性能进行优化
  - 便于应用程序出现问题之后排查问题和解决问题
  - 便于监控系统的运行状态
  - ...


日志相关框架:
- JUL:这是JavaSE平台提供的官方日志框架(也被称为JUL),配置相对简单,但不够灵活,性能较差
- Log4j:一个流行的日志框架,提供了灵活的配置选项,支持多种输出目标
- Logback:基于Log4j升级而来,提供了更多的功能和配置选项,性能优于Log4j
- Slf4j:(Simple Logging Facade for Java)简单日志门面,提供了一套日志操作的标准接口及抽象类,允许应用程序使用不同的底层日志框架


Logback日志级别:指的是日志信息的类型,日志都会分级别,常见的日志级别如下(优先级由低到高):
  1.trace:追踪,记录程序运行轨迹(使用很少) log.trace("...")
  2.debug:调式,记录程序调试过程中的信息,实际应用中一般将其视为最低级别(使用较多) log.debug("...")
  3.info:记录一般信息,描述程序运行的关键事件,如网络连接,io操作(使用较多) log.info("...")
  4.warn:警告信息,记录潜在有害的情况(使用较多) log.warn("...")
  5.error:错误信息(使用较多) log.error("...")
可以在配置文件logback.xml中灵活地控制输出以上类型的日志(大于等于配置的日志级别的日志才会输出)
例如:<root level="info">只会控制输出info及其以上级别的日志(即info,debug,trace)


lombok中提供的@Slf4j注解可以简化定义日志记录器这步操作,添加了该注解就相当于在类中定义了日志记录器:
private static Logger log = LoggerFactory.getLogger(Xxx. class);